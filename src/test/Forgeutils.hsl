#
#                           Copyright (C) 2005-2016 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
function has_valgrind() : result type int {
    if (hefesto.sys.os_name() == "windows") {
        result 0;
    }
    var no_valgrind type list;
    $no_valgrind = hefesto.sys.get_option("test-options");
    if ($no_valgrind.count() > 0) {
        if ($no_valgrind.index_of("--no-valgrind") > -1) {
            result 0;
        }
    }
    result (hefesto.sys.run("valgrind --version >/dev/null 2>&1") == 0);
}

function wrap_cmdline_with_valgrind(cmdline type string, logpath type string) : result type string {
    result "valgrind --tool=memcheck --leak-check=full --log-file=" + $logpath + " " + $cmdline;
}

function help() : result type none {
    var help type list;
    $help = hefesto.sys.get_option("help");
    if ($help.count() > 0) {
        hefesto.sys.echo("--help -> You got the main info about these options\n" +
                         "--devels-forge -> It runs a faster build. Desired while developing some stuff or maintaining\n" +
                         "--no-valgrind -> Inhibits the valgrind usage\n" +
                         "--fuzz-nr -> Specifies the amount of random texts generated by the compiler's fuzz test\n" +
                         "--cutest-log-path -> Specifies the file path for the main test log\n" +
                         "--cutest-leak-check -> Activates the cutest (the testing library) memory leak detection system\n" + 
                         "--skip-fuzz-tests -> Skips the compiler's fuzz test\n" +
                         "--skip-fancy-outputs-assurance -> Skips the test about the quality of the generated tablatures\n");
        hefesto.project.abort(0);
    }
}

function print_tester_monkey_banner() : result type string {
    var username type string;
    $username = hefesto.sys.env("USER");
    if ($username.len() == 0) {
        $username = hefesto.sys.env("USERNAME");
        if ($username.len() == 0) {
            $username = "User";
        }
    }
    if ($username != "User") {
        $username = "user " + $username;
    }
    hefesto.sys.echo("________________________________________________________\n\n" +
                     "Hello beloved " + $username + "! I am the Tulip's Tester Monkey...\n" +
                     " For your best software experience,\n" +
                     "    I will test the generated software...\n" +
                     "  You know... in order to see if everything is really fine...\n" +
                     "    I think Rafael took care to make it acceptable for us.\n" +
                     "     At least since the last time I saw him he told me:\n" +
                     "        \"- Dude, the Tulip is working fine <<on my system>>!!!\"\n" +
                     "       So, let's proof what he said before start using Tulip...\n" +
                     "    Maybe these tests can take some time, please be patient...\n" +
                     "        I am just a testholic monkey!!\n" +
                     "          __\n" +
                     "     w  c(..)o   (\n" +
                     "      \\__(-)    __)\n" +
                     "          /\\   (\n" +
                     "         /(_)___)\n" +
                     "         w /|\n" +
                     "          | \\\n" +
                     "         m  m\n" +
                     "________________________________________________________\n\n");
}

function print_test_monkey_end_banner(tests_exit_code type int) : result type string {
    hefesto.sys.echo("\n________________________________________________________\n\n");
    if ($tests_exit_code == 0) {
        hefesto.sys.echo("*** NICE: Rafael got reason, all is fine in Tulip! You can start using it right now!\n" +
                         "          You can follow installing the Tulip using \"hefesto --install\" command if you want to...\n" +
                         "          I hope you enjoy it!\n");
    } else {
        hefesto.sys.echo("~~~ Oops: I found some issues during the tests. It would be nice let Rafael know.\n");
        hefesto.sys.echo("          Please, open an issue on https://github.com/rafael-santiago/tulip/issues, including your environment details.\n");
        hefesto.sys.echo("          Additonally, attach to your issue " + get_relevant_test_logs_to_attach());
        hefesto.sys.echo("          It will be helpful to him.\n");
        hefesto.sys.echo("    Thanks!\n");
    }
}

local function get_relevant_test_logs_to_attach() : result type string {
    var RElevant_files type list;
    #
    # INFO(Santiago): If your new test creates a file using a file name not matched
    #                 by the following regex patterns you must add this new one pattern below.
    $RElevant_files.add_item(".*test\\.log$");
    $RElevant_files.add_item(".*fuzz\\.tlp$");
    $RElevant_files.add_item(".*output\\.txt$");
    $RElevant_files.add_item(".*memcheck\\.log$");
    $RElevant_files.add_item(".*final\\.tlp$");

    var files_to_attach type list;

    var r type int;
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    hefesto.sys.cd("test");
    $r = 0;
    while ($r < $RElevant_files.count()) {
        $files_to_attach.ls($RElevant_files.item($r));
        $r = $r + 1;
    }
    hefesto.sys.cd($oldcwd);

    var listing type string;

    if ($files_to_attach.count() == 1) {
        $listing = "the file:\n";
    } else {
        $listing = "the files:\n";
    }

    $r = 0;
    while ($r < $files_to_attach.count()) {
        $listing = $listing + "\t\t" + $files_to_attach.item($r) + "\n";
        $r = $r + 1;
    }

    result $listing;
}
