#
#                           Copyright (C) 2005-2016 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
include ~/fsutil.hsl

function installer() : result type none {
    var options type list;
    var exit_code type int;

    $options = hefesto.sys.get_option("install");

    if ($options.count() > 0) {
        $exit_code = install();
        if ($exit_code == 0) {
            hefesto.sys.echo("*** INSTALL: success!\n");
        } else {
            hefesto.sys.echo("~~~ INSTALL: failure!\n");
        }
        hefesto.project.abort($exit_code);
    }

    $options = hefesto.sys.get_option("uninstall");

    if ($options.count() > 0) {
        $exit_code = uninstall();
        if ($exit_code == 0) {
            hefesto.sys.echo("*** UNINSTALL: success!\n");
        } else {
            hefesto.sys.echo("~~~ UNINSTALL: failure!\n");
        }
        hefesto.project.abort($exit_code);
    }
}

local function install_additional_files() : result type int {
    var add_src type list;
    var add_dst type list;

    var curr_dst type list;

    var basepath type string;

    if (hefesto.sys.os_name() != "windows") {
        $basepath = "/usr/local/share/tulip/doc";
    } else {
        $basepath = "C:\\tulip\\doc";
    }

    $add_src.add_item("../doc/MANUAL.md");
    $add_dst.add_item(hefesto.sys.make_path($basepath,"MANUAL.md"));

    $add_src.add_item("../doc/DSL.md");
    $add_dst.add_item(hefesto.sys.make_path($basepath, "DSL.md"));

    if (mktree($basepath) == 0) {
        hefesto.sys.echo("INSTALL WARNING: unable to install additional files.\n");
        result 0;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd($basepath) == 0) {
        hefesto.sys.echo("INSTALL WARNING: unable to install additional files.\n");
        result 0;
    }
    $curr_dst.ls(".*");
    hefesto.sys.cd($oldcwd);

    if ($curr_dst.count() > 0) {
        var c type int;
        $c = 0;
        var choice type string;
        $choice = "#";
        while ($c < $curr_dst.count() && $choice != "n") {
            if ($add_dst.index_of($curr_dst.item($c)) == -1) {
                if ($choice == "#") {
                    while ($choice != "y" && $choice != "n" && $choice != "c") {
                        $choice = hefesto.sys.prompt("The path " + $basepath + " seems to have previous files. Do you want to DELETE them? [y/n/c] ");
                    }
                }
                if ($choice == "c") {
                    hefesto.sys.echo("INSTALL WARNING: unable to install additional files.\n");
                    result 0;
                } else if ($choice == "y") {
                    hefesto.sys.rm($curr_dst.item($c));
                }
            }
            $c = $c + 1;
        }
    }

    var copied type int;
    $copied = 1;
    while ($copied == 1 && $c < $add_dst.count()) {
        $copied = hefesto.sys.cp($add_src.item($c), $add_dst.item($c));
        $c = $c + 1;
    }

    if ($copied == 0) {
        hefesto.sys.echo("INSTALL WARNING: some errors occurred during the installing.\n");
        result 0;
    }

    result 1;
}

local function install() : result type int {
    var bin_dst type string;
    var bin_src type string;

    if (hefesto.sys.os_name() != "windows") {
        $bin_dst = "/usr/local/bin/tulip";
    } else {
        $bin_dst = "C:\\tulip\\bin\\tulip.exe";
    }

    if (hefesto.sys.os_name() != "windows") {
        $bin_src = "../bin/tulip";
    } else {
        $bin_src = "..\\bin\\tulip.exe";
    }

    while (isfile($bin_src) == 0) {
        hefesto.sys.echo("WARNING: The source tulip's binary file was not found.\n");

        var choice type string;
        $choice = "#";
        while ($choice != "y" && $choice != "n" && $choice != "c") {
            $choice = hefesto.sys.prompt("The Tulip's binary was not found. Do you want to build it in order to install it later? [y/n/c] ");
        }

        if ($choice == "n" || $choice == "c") {
            hefesto.sys.echo("INSTALL ERROR: process aborted by the user.\n");
            result 1;
        }

        var forge_exit_code type int;
        $forge_exit_code = hefesto.sys.run("hefesto");
        if ($forge_exit_code != 0) {
            result 1;
        }
    }

    while (isfile($bin_dst)) {
        hefesto.sys.echo("WARNING: another binary called tulip already exists under the path " + $bin_dst + "\n");

        $choice = "#";
        while ($choice != "y" && $choice != "n" && $choice != "c") {
            $choice = hefesto.sys.prompt("Do you want to overwrite it? [y/n/c] ");
        }

        if ($choice == "c") {
            hefesto.sys.echo("INSTALL ERROR: process aborted by the user.\n");
            result 1;
        }

        if ($choice == "n") {
            $bin_dst = hefesto.sys.prompt("So type the new destination file path of your choice or \"c\" to cancel: ");
            if ($bin_dst == "c") {
                hefesto.sys.echo("INSTALL ERROR: process aborted by the user.\n");
                result 1;
            }
        } else if ($choice == "y") {
            break;
        }
    }

    var d type int;
    var d_end type int;
    var reach_the_end type int;

    $d_end = $bin_dst.len() - 1;
    $reach_the_end = 0;
    while ($d_end > 0 && $reach_the_end == 0) {
        if (hefesto.sys.os_name() == "windows") {
            $reach_the_end = ($bin_dst.at($d_end) == "\\" || $bin_dst.at($d_end) == "/");
        } else {
            $reach_the_end = ($bin_dst.at($d_end) == "/");
        }
        $d_end = $d_end - 1;
    }

    var dst_dir type string;
    $d = 0;
    while ($d <= $d_end) {
        $dst_dir = $dst_dir + $bin_dst.at($d);
        $d = $d + 1;
    }

    if (isdir($dst_dir) == 0) {
        if (mktree($dst_dir) == 0) {
            hefesto.sys.echo("INSTALL ERROR: unable to create the destination path " + $dst_dir + "\n");
            result 1;
        }
    }

    var exit_code type int;
    $exit_code = 0;
    if (hefesto.sys.cp($bin_src, $bin_dst) != 1) {
        $exit_code = 1;
    }

    if (hefesto.sys.os_name() != "windows") {
        var man_dst type string;
        var copied type int;

        $copied = 0;

        if (mktree("/usr/local/man/man1/")) {
            $copied = hefesto.sys.cp("../doc/man/tulip.1", "/usr/local/man/man1/tulip.1");
        }

        if ($copied == 0) {
            hefesto.sys.echo("INSTALL WARNING: unable to install the tulip's man page.\n");
        }
    }

    if ($exit_code == 0 && install_additional_files() != 1) {
        hefesto.sys.echo("INSTALL WARNING: the additional files were not completely installed.\n");
    }

    if (hefesto.sys.os_name() == "windows") {
        export_binary_path($bin_dst);
    }

    result $exit_code;
}

local function uninstall_additional_files() : result type int {
    var basepath type string;

    if (hefesto.sys.os_name() != "windows") {
        $basepath = "/usr/local/share/tulip/";
    } else {
        $basepath = "C:\\tulip\\";
    }

    var add_dst type list;
    $add_dst.add_item(hefesto.sys.make_path($basepath, "doc/MANUAL.md"));
    $add_dst.add_item(hefesto.sys.make_path($basepath, "doc/DSL.md"));
    $add_dst.add_item(hefesto.sys.make_path($basepath, "doc"));
    if (hefesto.sys.os_name() == "windows") {
        $add_dst.add_item(hefesto.sys.make_path($basepath, "bin"));
    }
    $add_dst.add_item(hefesto.sys.make_path($basepath, ""));

    var exit_code type int;

    var a type int;
    $a = 0;
    $exit_code = 0;
    while ($a < $add_dst.count() && $exit_code == 0) {
        var path type string;
        $path = $add_dst.item($a);

        if (isfile($path)) {
            $exit_code = hefesto.sys.rm($add_dst.item($a));
        } else {
            $exit_code = hefesto.sys.rmdir($add_dst.item($a));
        }
        $a = $a + 1;
    }

    if ($exit_code != 0) {
        hefesto.sys.echo("UNINSTALL WARNING: Some additional files were not uninstalled.\n");
        result 0;
    }

    result 1;
}

local function uninstall() : result type int {
    var bin_dst type string;

    if (hefesto.sys.os_name() != "windows") {
        $bin_dst = "/usr/local/bin/tulip";
    } else {
        $bin_dst = "C:\\tulip\\bin\\tulip.exe";
    }

    var choice type string;
    $choice = "#";
    while ($choice != "y" && $choice != "n") {
        $choice = hefesto.sys.prompt("Do you want to uninstall tulip? [y/n] ");
    }

    if ($choice == "n") {
        hefesto.sys.echo("UNINSTALL ERROR: process aborted by the user.\n");
        result 1;
    }

    $choice = "#";
    while ($choice != "y" && $choice != "n" && $choice != "c") {
        $choice = hefesto.sys.prompt("Does the tulip binary really installed under the path " + $bin_dst + " [y/n/c] ");
    }

    if ($choice == "c") {
        hefesto.sys.echo("UNINSTALL ERROR: process aborted by the user.\n");
        result 1;
    }

    if ($choice == "n") {
        var new_dst type string;
        $new_dst = $bin_dst;
        while ($new_dst == $bin_dst || isfile($new_dst) == 0 && $new_dst != "c") {
            $new_dst = hefesto.sys.prompt("So type the tulip's path or type \"c\" to cancel: ");
        }
        if ($new_dst == "c") {
            hefesto.sys.echo("UNINSTALL ERROR: process aborted by the user.\n");
            result 1;
        }
        $bin_dst = $new_dst;
    }

    var exit_code type int;
    $exit_code = 1;

    $exit_code = hefesto.sys.rm($bin_dst);

    if ($exit_code == 0) {
        if (hefesto.sys.os_name() != "windows") {
            $exit_code = hefesto.sys.rm("/usr/local/man/man1/tulip.1");
        }
        if (uninstall_additional_files() == 0) {
            $exit_code = 1;
        }
    }

    if (hefesto.sys.os_name() == "windows") {
        unexport_binary_path($bin_dst);
    }

    result $exit_code;
}

local function export_binary_path(basepath type string) : result type none {
    UNExport_binary_path($basepath, 1);
}

local function unexport_binary_path(basepath type string) : result type none {
    UNExport_binary_path($basepath, 0);
}

local function UNExport_binary_path(basepath type string, export type int) : result type none {
    var env_path type list;
    $env_path = get_windows_path_data();

    $basepath.replace("tulip\\.exe", "");

    var action_cond type int;
    if ($export == 1) {
        $action_cond = ($env_path.index_of($basepath) == -1);
    } else {
        $action_cond = ($env_path.index_of($basepath) > -1);
    }
    if ($action_cond) {
        if ($export == 1) {
            $env_path.add_item($basepath);
        } else {
            while ($env_path.index_of($basepath) > -1) {
                $env_path.del_item($basepath);
            }
        }
        set_windows_path_data($env_path);
        if ($export == 1) {
            hefesto.sys.echo("INSTALL INFO: the binary was exported. Try to log-off and log-on again in order to reload your PATH environment variable.\n");
        } else {
            hefesto.sys.echo("UNINSTALL INFO: the binary was unexported.\n");
        }
    } else {
        if ($export == 1) {
            hefesto.sys.echo("INSTALL WARNING: the binary was previously exported.\n");
        } else {
            hefesto.sys.echo("UNINSTALL INFO: the binary was not exported.\n");
        }
    }
}

local function set_windows_path_data(data type list) : result type none {
    var env_path_buf type string;
    var d type int;

    $d = 0;
    while ($d < $data.count()) {
        $env_path_buf = $env_path_buf + $data.item($d) + ";";
        $d = $d + 1;
    }

    if ($env_path_buf.len() > 0) {
        hefesto.sys.setenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH", $env_path_buf);
    }
}

local function get_windows_path_data() : result type list {
    var env_path_data type list;
    var buf type string;

    $buf = hefesto.sys.env("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH");

    var b type int;
    var item type string;

    $b = 0;
    while ($b < $buf.len()) {
        if ($buf.at($b) == ";") {
            $env_path_data.add_item($item);
            $item = "";
        } else {
            $item = $item + $buf.at($b);
        }
        $b = $b + 1;
    }

    if ($item.len() > 0) {
        $env_path_data.add_item($item);
    }

    result $env_path_data;
}
