#
#                           Copyright (C) 2005-2016 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl
include Install.hsl
include Forgeutils.hsl

var src type list;
var inc type list;
var cflags type list;
var lib type list;
var ldflags type list;
var appname type string;
var deps type string;

project tulip : toolset "gcc-c-app" : dependencies $deps : $src, $inc, $cflags, $lib, $ldflags, $appname ;

function get_app_name() : result type string {
    if (hefesto.sys.os_name() != "windows") {
        result "tulip";
    }
    result "tulip.exe";
}

function get_codes() : result type list {
    var codes type list;
    var submodules type list;
    var s type int;
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    hefesto.sys.setenv("GET_C_CPP_DEPS_SRC_ROOT", $oldcwd);
    $deps = get_c_cpp_deps();
    $codes.ls(".*\\.c$");
    $submodules = hefesto.sys.get_option("sub-modules");
    $s = 0;
    while ($s < $submodules.count()) {
        if (hefesto.sys.cd($submodules.item($s))) {
            $deps = $deps + get_c_cpp_deps();
            $codes.ls(".*\\.c$");
        } else {
            hefesto.sys.echo("ERROR: unable to access the sub-directory \"" + $submodules.item($s) + "\".\n");
            hefesto.project.abort(1);
        }
        hefesto.sys.cd($oldcwd);
        $s = $s + 1;
    }
    result $codes;
}

function runtests() : result type int {
    var oldcwd type string;
    var test_options type list;
    var test_options_data type string;
    var t type int;

    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.cd("test");
    $test_options = hefesto.sys.get_option("test-options");
    if ($test_options.count() > 0) {
        $test_options_data = " --test-options=";
        $t = 0;
        while ($t < $test_options.count()) {
            $test_options_data = $test_options_data + $test_options.item($t);
            $t = $t + 1;
            if ($t != $test_options.count()) {
                $test_options_data = $test_options_data + ",";
            }
        }
    }

    var devels_forge type list;
    $devels_forge = hefesto.sys.get_option("devels-forge");
    if ($devels_forge.count() > 0) {
        $test_options_data = $test_options_data + " --devels-forge";
    }

    hefesto.sys.forge("tulip-tests", "Forgefile.hsl", "--obj-output-dir=o --bin-output-dir=bin --master-project-obj-dir=../o --includes=cutest/src,../. --ldflags=-lcutest --libraries=cutest/src/lib" + $test_options_data);

    hefesto.sys.cd($oldcwd);

    var tests_forge_result type int;

    $tests_forge_result = hefesto.sys.last_forge_result();

    if ($tests_forge_result == 0) {
        var pack_and_go type list;

        $pack_and_go = hefesto.sys.get_option("pack-and-go");

        if ($pack_and_go.count() > 0) {
            hefesto.sys.echo("\n___\n");
            if (set_prebuilt() == 0) {
                hefesto.sys.echo("PACK AND GO WARN: Nothing was done. Try to fix the related issues and return later.\n");
            } else {
                hefesto.sys.echo("PACK AND GO INFO: A new pre-built for " + hefesto.sys.os_name() + " was generated. Do not forget to commit/push it if you really want to.\n" +
                                 "                  After committing you should remove the rescue copy (\"README.md~\") of the old README.md done under the repo's toplevel path.\n");
            }
            hefesto.sys.echo("___\n");
        }
    }

    result $tests_forge_result;
}

function init_forge() : result type none {
    $src = get_codes();
    $inc = hefesto.sys.get_option("includes");
    $appname = get_app_name();
}

tulip.prologue() {
    help();
    installer();
    init_forge();
}

tulip.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if (runtests() == 0) {
            hefesto.sys.echo("\n___\n*** SUCCESS.\n");
        }
    } else {
        hefesto.sys.echo("\n___\n~~~ FAILURE.\n");
    }
}
